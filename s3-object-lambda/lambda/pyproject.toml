[project]
name = "lambda"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "boto3>=1.40.21",
    "pillow>=11.3.0",
]

[dependency-groups]
dev = [
    "ruff>=0.12.5",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive rule sets for high code quality
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "D",    # pydocstyle
    "PL",   # pylint
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "RUF",  # ruff-specific rules
]

ignore = [
    "E501",  # line too long, handled by formatter
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
    "D203",  # 1 blank line required before class docstring
    "D213",  # multi-line docstring summary should start at the second line
    "PLR0913",  # too many arguments to function call
]

# Allow fix for all enabled rules
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403", "F811"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

# Enable docstring formatting
docstring-code-format = true

[tool.ruff.lint.isort]
known-first-party = ["scripts"]
force-sort-within-sections = true
